from sqlalchemy import MetaData, Table, Column, Integer, String, PickleType


# Императивный стиль описания моделей - определение через Table. Table - это класс SQLAlchemy, представляющий структуру таблицы в базе данных. Объект Metadata, в этом случае, передаём по ссылке

# Преимущества:
# Удобно для динамического создания таблиц, где структура может меняться.
# Нет необходимости создавать и настраивать базовые классы.

# Недостатки:
# Этот подход не предоставляет всех возможностей ORM, таких как автоматическое управление сессиями и отношения между моделями.
# Для больших проектов код может стать менее читаемым и организованным по сравнению с декларативным стилем.
# В крупных проектах Вы можете сочетать оба способа, что позволяет комбинировать их преимущества. Например, можно определить базовые таблицы с помощью Table, а более сложные модели с помощью декларативного стиля.


metadata = MetaData()

felis = Table('felis', metadata,
                   Column('id', Integer, primary_key=True),
                   Column('name', String, nullable=False),
                   Column('birthdate', String, nullable=False),
                   Column('character', String, nullable=False),
                   Column('condition', String, nullable=False),
                   Column('abilities', PickleType, nullable=True))





# Такой способ описания модели таблицы называется декларативный стиль. Модель определяется как класс, который наследует от Base.
# Основные элементы класса описываются в виде атрибутов класса (в частности атрибут __tablename__ - это имя таблицы в базе данных).
# Остальные переменные-атрибуты класса модели соответствуют полю в таблице базы данных.

# При указании типа данных поля используются типы данных SQLAlchemy, такие как `Integer`, `String`, `Float` и т.д.

# Они будут приведены к соответствующему типу данных СУБД, с которой будет установлено соединение.

# Преимущества декларативного стиля описания:
# Код читаем и интуитивно понятен. Используя классы, вы можете легко использовать наследование и другие объектно-ориентированные принципы.
# Декларативный стиль хорошо интегрируется с возможностями ORM, такими как отношения между моделями и работа с сессиями.
# Классы более самодокументируемы, что облегчает понимание структуры данных.

# Недостатки:
# Для работы с декларативным стилем нужно больше настроек (например, создание базового класса).
# Если вам нужно динамически создавать модели на основе данных, декларативный стиль может быть менее удобен




from sqlalchemy.orm import DeclarativeBase


class Base(DeclarativeBase):
    pass


class Felis(Base):
    """
    Класс для описания питомцев - кошек
    """
    __tablename__ = 'felis'

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    birthdate = Column(String, nullable=False)
    character = Column(String, nullable=False)
    condition = Column(String, nullable=False)
    abilities = Column(PickleType, nullable=True)  # Используем PickleType для хранения списков