# alembic revision --autogenerate -m "Название миграции"

# Эта команда создает новую миграцию на основе различий между моделями SQLAlchemy (Python-классами) и текущим состоянием базы данных.

# Пошагово это выглядит так:

# 1. Сканирование моделей SQLAlchemy:
# Alembic импортирует ваши модели из models/ (например, Base, Owners, Pets).
# Создает виртуальную структуру БД на основе этих моделей (таблицы, колонки, индексы и т.д.).

# 2. Сравнение с реальной БД:
# Подключается к БД (настройки берутся из alembic.ini и env.py).
# Через механизм sqlalchemy.schema.Inspector получает текущую схему БД.

# 3. Генерация миграции:
# Если есть различия (например, в моделях появилась новая таблица, а в БД её нет), Alembic генерирует код миграции в файле вида "Дата миграции_ID миграции_Название миграции.py.
# В этом файле будут команды op.create_table(), op.add_column() и т.д.

# 4. Создание файла миграции:
# Файл сохраняется в папке alembic/{mysql|postgresql|sqlite}/versions/.
# В него добавляется содержимое:"Initial migration" (аргумент -m) и данные о дате версии:

# Если БД пустая, миграция сгенерирует всё «с нуля».
# Если в БД уже есть таблицы, не описанные в моделях, Alembic может предложить удалить их (можно отключить в env.py).

# * У нас уже были созданы таблицы в БД, поэтому мы использовали alembic revision --autogenerate
# В общем случае создаётся пустой файл миграции в versions/. с помощью команды:
# alembic revision -m "Add users table"