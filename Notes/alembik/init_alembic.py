# Alembic - это инструмент для работы с миграциями для SQLAlchemy. Официальная документация

# Что же он может?

# Создавать миграции - Alembic генерирует файлы миграций, которые содержат инструкции для изменения схемы базы данных.
# Применять миграции, т.е. изменять состояние базы до указанной ревизии.
# Осуществлять откат миграций - мы можем вернуться к предыдущей версии схемы базы данных.
# Отслеживать версии - Alembic автоматически отслеживает версии миграций, сохраняя информацию о применённых миграциях в специальной таблице в базе данных.
# Поддерживает различные базы данных - PostgreSQL, MySQL, SQLite и другие.
# Работать с несколькими окружениями - Alembic позволяет управлять миграциями в разных окружениях (например, разработка, тестирование, продакшн). Для этого настраиваются отдельные конфигурации.
# Очевидно, что чем раньше мы начнём использовать миграции в своём проекте, тем проще нам будет выявлять и исправлять недостатки.

# Установка библиотеки:

# pip install alembic
# После установки Alembic, нам нужно инициализировать его в папке проекта. Для этого перейдем в папку проекта и выполним:
# alembic init alembic

# В файле alembic.ini указываем адрес базы:
# sqlalchemy.url = postgresql+psycopg2://gsa:0502@localhost:8080/PostgreSQL

# В файле env.py импортируем все модели и указываем target_metadata = Base.metadata


# Для того чтобы миграции в папке versions располагались последовательно мы можем раскомментировать строку - file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s
# Она будет добавлять к id и названию миграции дату и время ее создания

# ОБЯЗАТЕЛЬНО в строке script_location файла alembic.ini указать правильный путь к скриптам в папке alembic
# Если терминал открыт в корне проекта и папка alembic находится в корне, то путь будет такой - script_location = ./alembic

